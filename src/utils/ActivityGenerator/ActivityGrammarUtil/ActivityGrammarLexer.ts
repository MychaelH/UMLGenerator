// Generated from src/assets/ActivityGrammar.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ActivityGrammarLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly IDENT = 15;
	public static readonly STRING = 16;
	public static readonly WS = 17;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "IDENT", "STRING", "ESC", 
		"WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':'", "';'", "'start'", "'end'", "'stop'", "'if'", "'then'", 
		"'endif'", "'elseif'", "'else'", "'repeat'", "'endrepeat'", "'fork'", 
		"'endfork'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "IDENT", "STRING", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ActivityGrammarLexer._LITERAL_NAMES, ActivityGrammarLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ActivityGrammarLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ActivityGrammarLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "ActivityGrammar.g4"; }

	// @Override
	public get ruleNames(): string[] { return ActivityGrammarLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ActivityGrammarLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ActivityGrammarLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ActivityGrammarLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x13\x93\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x07\x10" +
		"v\n\x10\f\x10\x0E\x10y\v\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x07" +
		"\x11\x80\n\x11\f\x11\x0E\x11\x83\v\x11\x03\x11\x03\x11\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x05\x12\x8B\n\x12\x03\x13\x06\x13\x8E\n\x13\r\x13\x0E" +
		"\x13\x8F\x03\x13\x03\x13\x04w\x81\x02\x02\x14\x03\x02\x03\x05\x02\x04" +
		"\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v" +
		"\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!" +
		"\x02\x12#\x02\x02%\x02\x13\x03\x02\x03\x05\x02\v\f\x0F\x0F\"\"\x02\x97" +
		"\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02" +
		"\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02" +
		"\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02" +
		"\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02" +
		"\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02" +
		"!\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x03\'\x03\x02\x02\x02\x05)\x03" +
		"\x02\x02\x02\x07+\x03\x02\x02\x02\t1\x03\x02\x02\x02\v5\x03\x02\x02\x02" +
		"\r:\x03\x02\x02\x02\x0F=\x03\x02\x02\x02\x11B\x03\x02\x02\x02\x13H\x03" +
		"\x02\x02\x02\x15O\x03\x02\x02\x02\x17T\x03\x02\x02\x02\x19[\x03\x02\x02" +
		"\x02\x1Be\x03\x02\x02\x02\x1Dj\x03\x02\x02\x02\x1Fr\x03\x02\x02\x02!|" +
		"\x03\x02\x02\x02#\x8A\x03\x02\x02\x02%\x8D\x03\x02\x02\x02\'(\x07<\x02" +
		"\x02(\x04\x03\x02\x02\x02)*\x07=\x02\x02*\x06\x03\x02\x02\x02+,\x07u\x02" +
		"\x02,-\x07v\x02\x02-.\x07c\x02\x02./\x07t\x02\x02/0\x07v\x02\x020\b\x03" +
		"\x02\x02\x0212\x07g\x02\x0223\x07p\x02\x0234\x07f\x02\x024\n\x03\x02\x02" +
		"\x0256\x07u\x02\x0267\x07v\x02\x0278\x07q\x02\x0289\x07r\x02\x029\f\x03" +
		"\x02\x02\x02:;\x07k\x02\x02;<\x07h\x02\x02<\x0E\x03\x02\x02\x02=>\x07" +
		"v\x02\x02>?\x07j\x02\x02?@\x07g\x02\x02@A\x07p\x02\x02A\x10\x03\x02\x02" +
		"\x02BC\x07g\x02\x02CD\x07p\x02\x02DE\x07f\x02\x02EF\x07k\x02\x02FG\x07" +
		"h\x02\x02G\x12\x03\x02\x02\x02HI\x07g\x02\x02IJ\x07n\x02\x02JK\x07u\x02" +
		"\x02KL\x07g\x02\x02LM\x07k\x02\x02MN\x07h\x02\x02N\x14\x03\x02\x02\x02" +
		"OP\x07g\x02\x02PQ\x07n\x02\x02QR\x07u\x02\x02RS\x07g\x02\x02S\x16\x03" +
		"\x02\x02\x02TU\x07t\x02\x02UV\x07g\x02\x02VW\x07r\x02\x02WX\x07g\x02\x02" +
		"XY\x07c\x02\x02YZ\x07v\x02\x02Z\x18\x03\x02\x02\x02[\\\x07g\x02\x02\\" +
		"]\x07p\x02\x02]^\x07f\x02\x02^_\x07t\x02\x02_`\x07g\x02\x02`a\x07r\x02" +
		"\x02ab\x07g\x02\x02bc\x07c\x02\x02cd\x07v\x02\x02d\x1A\x03\x02\x02\x02" +
		"ef\x07h\x02\x02fg\x07q\x02\x02gh\x07t\x02\x02hi\x07m\x02\x02i\x1C\x03" +
		"\x02\x02\x02jk\x07g\x02\x02kl\x07p\x02\x02lm\x07f\x02\x02mn\x07h\x02\x02" +
		"no\x07q\x02\x02op\x07t\x02\x02pq\x07m\x02\x02q\x1E\x03\x02\x02\x02rw\x07" +
		"~\x02\x02sv\x05#\x12\x02tv\v\x02\x02\x02us\x03\x02\x02\x02ut\x03\x02\x02" +
		"\x02vy\x03\x02\x02\x02wx\x03\x02\x02\x02wu\x03\x02\x02\x02xz\x03\x02\x02" +
		"\x02yw\x03\x02\x02\x02z{\x07~\x02\x02{ \x03\x02\x02\x02|\x81\x07$\x02" +
		"\x02}\x80\x05#\x12\x02~\x80\v\x02\x02\x02\x7F}\x03\x02\x02\x02\x7F~\x03" +
		"\x02\x02\x02\x80\x83\x03\x02\x02\x02\x81\x82\x03\x02\x02\x02\x81\x7F\x03" +
		"\x02\x02\x02\x82\x84\x03\x02\x02\x02\x83\x81\x03\x02\x02\x02\x84\x85\x07" +
		"$\x02\x02\x85\"\x03\x02\x02\x02\x86\x87\x07^\x02\x02\x87\x8B\x07$\x02" +
		"\x02\x88\x89\x07^\x02\x02\x89\x8B\x07^\x02\x02\x8A\x86\x03\x02\x02\x02" +
		"\x8A\x88\x03\x02\x02\x02\x8B$\x03\x02\x02\x02\x8C\x8E\t\x02\x02\x02\x8D" +
		"\x8C\x03\x02\x02\x02\x8E\x8F\x03\x02\x02\x02\x8F\x8D\x03\x02\x02\x02\x8F" +
		"\x90\x03\x02\x02\x02\x90\x91\x03\x02\x02\x02\x91\x92\b\x13\x02\x02\x92" +
		"&\x03\x02\x02\x02\t\x02uw\x7F\x81\x8A\x8F\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ActivityGrammarLexer.__ATN) {
			ActivityGrammarLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ActivityGrammarLexer._serializedATN));
		}

		return ActivityGrammarLexer.__ATN;
	}

}

